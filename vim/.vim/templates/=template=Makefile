#
# %FFILE%
# https://stackoverflow.com/questions/30573481/how-to-write-a-makefile-with-separate-source-and-header-directories

#vpath %.h ./inc

SRC_DIR := src
OBJ_DIR := obj
BIN_DIR := bin

EXE := $(BIN_DIR)/a.out
SRC := $(wildcard $(SRC_DIR)/*.c)
# patsubst 函数用于将文件模式进行替换。
# 用法: $(patsubst 原模式， 目标模式， 文件列表)
OBJ := $(patsubst $(SRC_DIR)/%.c, $(OBJ_DIR)/%.o, $(SRC))

CPPFLAGS := -Iinclude # -I is a preprocessor flag, not a compiler flag
#  Note: (CPP stands for C PreProcessor here, not CPlusPlus! Use CXXFLAGS for C++ flags and CXX for C++ compiler.)
CFLAGS   = -Wall
CFLAGS   += -O2
LDFLAGS  := -Llib       # -L is a linker flag
LDLIBS   := -lm         # Left empty if no libs are needed

# 解释： = 替换 += 追加:= 恒等于

.PHONY: all clean

all: $(EXE)
	%HERE%@echo "%FFILE% needs your attention!"

$(EXE): $(OBJ) | $(BIN_DIR) 
	@# 生成可执行程序, OBJ->TAR
	@echo "生成可执行程序:"
	$(CC) $(LDFLAGS) $^ $(LDLIBS) -o $@

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c | $(OBJ_DIR) 
	@echo "生成目标文件:"
	$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@

# Note: 在命令的前面加上 @,就可以关闭回声(echoing)：即：就不会有任何输出。

$(BIN_DIR) $(OBJ_DIR): 
	mkdir -p $@

clean: 
	@echo "删除目标文件和可执行程序:"
	@$(RM) -rv $(BIN_DIR) $(OBJ_DIR)

-include $(OBJ:.o=.d)


# vim:ft=make
