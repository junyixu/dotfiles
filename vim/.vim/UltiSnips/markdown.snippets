###########################
# Sections and Paragraphs #
###########################

global !p
def isMath():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'
endglobal


# snippet ,1 "Section" bA
# # ${1:Section Name}
# $0
# endsnippet

# snippet ,2 "Sub Section" bA
# ## ${1:Section Name}
# $0
# endsnippet

# snippet ,3 "SubSub Section" bA
# ### ${1:Section Name}
# $0
# endsnippet

# snippet ,4 "Paragraph" bA
# #### ${1:Paragraph Name}
# $0
# endsnippet
# snippet ,5 "Paragraph" bA
# ##### ${1:Paragraph Name}
# $0
# endsnippet

# snippet ,6 "Paragraph" bA
# ###### ${1:Paragraph Name}
# $0
# endsnippet

snippet head "my blog | Jekyll post header" b
---
layout: post
title: ${1:title}
subtitle: ${2:subtitle}
date: `!v strftime("%Y-%m-%d %H:%M:%S")`
author:     Killua
header-img: img/post-bg-coffee.jpeg
catalog: true
tags:
- ${4}
---
endsnippet

snippet math "my blog | Jekyll post math environment" b
<!-- 数学公式 -->
<script src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML" type="text/javascript"></script>
<script type="text/x-mathjax-config">
	MathJax.Hub.Config({
		TeX: { extensions: ["[Contrib]/physics/physics.js", "AMSmath.js","AMSsymbols.js", "[Contrib]/siunitx/siunitx.js"],
			Macros: {
					bm: ['{\boldsymbol {#1}}', 1] ,
				}
		},
		tex2jax: {
			skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'],
			inlineMath: [['$','$']]
		}
});
</script>


${0}
endsnippet

# snippet "\w* " "bold" iAr
# **${1:${VISUAL}}**$0
# endsnippet

# snippet * "italics" 
# *${1:${VISUAL}}*$0
# endsnippet

snippet mathjax "使用 mathjax" b
mathjax: true
endsnippet

snippet blue "blue font"
<span style="color:blue">$1</span>$0
endsnippet

snippet red "red font"
<span style="color:red">$1</span>$0
endsnippet

snippet pred "red paragraph"
<p style="color:red">$1</p>$0
endsnippet

snippet beamer "beamer" b
---
documentclass:
	- ctexbeamer
title:
	- Junyi's Presentation
author:
	- Junyi
theme:
	- Copenhagen
---


endsnippet


snippet img "Image"
![img]($1)$0
endsnippet

snippet fig "Image"
![img](${1:path}})$0
endsnippet

# 使用两个 ~~ 表示划去
snippet ~~ "划去" bA
~~${1:${VISUAL}}~~$0
endsnippet

# 使用两个 `` 展开 代码块
snippet '\`\`' "Codeblock" brA
\`\`\`
${1:${VISUAL}}
\`\`\`$0
endsnippet
# for chaoli.club 超理论坛
snippet md "markdown" bA
[markdown]
$0
[/markdown]
endsnippet

snippet - "todo" b
- [ ] 
endsnippet

snippet #b "Description" 
#flashcard-basic
endsnippet

snippet #r "Description" 
#flashcard-reversed
endsnippet

snippet #c "Description" 
#flashcard-cloze
endsnippet

snippet cc "Cloze deletion" i
{{c1::$1}}$0
endsnippet

snippet ac "anki" b
START
Cloze
$0
END
endsnippet

snippet ab "anki" b
START
Basic
$0
END
endsnippet

snippet ar "anki" b
START
Basic (and reversed card)
$0
END
endsnippet

snippet ^ "上标" i
<sup>$1</sup>
endsnippet

snippet _ "下标" i
<sub>$1</sub>
endsnippet

snippet --- "add property" b
---
aliases:
  - $1
tags:
  - math/geometry
---

endsnippet

snippet d "离考研天数" b
# 离组会还有`!p import datetime
finalday = datetime.date(2023, 2, 1)
today = datetime.date.today()
snip.rv=str((finalday - today).days)`天
endsnippet

priority 1000
snippet t "hh:mm" b
`!v strftime("%H:%M")`	
endsnippet

priority 100
snippet d "17:32 6小时2分钟" i
`!p import vim
import time
time_ago_str = vim.eval("getline(line('.'))[0:5]")
ago_hour=int(time_ago_str[0:2])
ago_minute=int(time_ago_str[3:5])
time_now_str = time.strftime('%H:%M', time.localtime())
now_hour=int(time_now_str[0:2])
now_minute=int(time_now_str[3:5])
delta_hour=now_hour-ago_hour
delta_minute=now_minute-ago_minute
if delta_minute < 0 :
	delta_hour -= 1
	delta_minute = 60 + delta_minute
if delta_hour==0 :
	snip.rv="\t"+time_now_str+"\t"+str(delta_minute)+"分钟"+"\t"
else:
	snip.rv="\t"+time_now_str+"\t"+str(delta_hour)+"小时"+str(delta_minute)+"分钟"+"\t"`
endsnippet

snippet physics "physics宏包 的 mathjax 拓展" b
$\require{physics}$
endsnippet

snippet rt "requirement traceability" b
## 做了后对我有什么用

$1

## 如果我不做会怎么样


endsnippet

snippet . "cdot"
\cdot
endsnippet

snippet b "begin" b
\begin{$1}
$2
\end{$1}
endsnippet

# snippet ** "bold text" i
# **${1:${VISUAL}}**
# endsnippet

# ./texmath.snippets
extends texmath

priority 10000
snippet // "Fraction" i
\\frac{$1}{$2}$0
endsnippet

priority 1000
snippet dm "Math" wA
$$${1:${VISUAL}}$$
endsnippet
priority 1000
snippet mk "Math" wA
$$1$
endsnippet
context "isMath()"
snippet op "cross product" i
\operatorname{$1} 
endsnippet 

priority 1
context "isMath()"
snippet dd "diff" A
\,\mathrm{d}
endsnippet 

priority 10
context "isMath()"
snippet x* "cross" A
\times 
endsnippet 

priority 100
context "isMath()"
snippet dv "diff" i
\frac{\mathrm{d} $1}{\mathrm{d} $2}
endsnippet 

priority 100
context "isMath()"
snippet dv2 "diff" i
\frac{\mathrm{d}^2 $1}{\mathrm{d} $2^2}
endsnippet 

priority 1000
context "isMath()"
snippet pdv "diff" i
\frac{\partial $1}{\partial $2}
endsnippet 

priority 1000
context "isMath()"
snippet pdv2 "diff" i
\frac{\partial^2 $1}{\partial $2^2}
endsnippet 


priority 100
context "isMath()"
snippet curl "Math" wA
\boldsymbol{\nabla} \times 
endsnippet
context "isMath()"
snippet div "Math" wA
\boldsymbol{\nabla} \cdot 
endsnippet
context "isMath()"
snippet lap "Math" wA
\nabla^2 
endsnippet
context "isMath()"
snippet grad "Math" wA
\boldsymbol{\nabla}
endsnippet
context "isMath()"
snippet "(\\\w+|\w)u" "Vector postfix" r
\boldsymbol{e}_{`!p snip.rv=match.group(1)`}
endsnippet 
priority 1000
context "isMath()"
snippet "([A-Za-z]+)(,\.|\.,)" "Vector postfix" rA
\mathbf{`!p snip.rv=match.group(1)`}
endsnippet 
priority 10000
context "isMath()"
snippet "(\\[A-Za-z]+)(,\.|\.,)" "Vector postfix" rA
\boldsymbol{`!p snip.rv=match.group(1)`}
endsnippet 

priority 100
context "isMath()"
snippet O "mathcal" i
\mathcal{O}
endsnippet 
context "isMath()"
snippet O' "mathcal" i
\mathcal{O}'
endsnippet 

# priority 1000
# snippet dd "diff" wA
# \,\mathrm{d} 
# endsnippet
