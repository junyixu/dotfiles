# - i 表示片段可在句中被触发。默认是只有在前面有多个空格或者在行首时才会被触发。 
# - A 表示片段会被自动触发 
# - w 表示片段只会在关键词为单独单词的情况下被触发。若关键词为 mk, 那么只有在 html mk 时会被触发，htmlmk 不会被触发。 
# - r 表示关键词使用正则表达式。正则表达式必须用 两个引号' '包围。比如 \'([1-9])day\'。 
# - b 表示只有在一行的开头才会被触发。
# 以下全部借鉴
# https://castel.dev/post/lecture-notes-1/

# https://vi.stackexchange.com/questions/18490/ultisnips-context-and-tex

global !p
def isMath():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'
endglobal


context "isMath()"
snippet q "quad"
\quad 
endsnippet

context "isMath()"
snippet l "label eq"
\label{eq:$1}
endsnippet

context "isMath()"
snippet d "微分"
\dv{$1}
endsnippet
context "isMath()"
snippet "\\dv{([\s\\\w]*)" "微分" ri
\dv{`!p snip.rv=match.group(1)`}{
endsnippet

context "isMath()"
snippet dd "二阶微分"
\dv[2]{$1}
endsnippet
context "isMath()"
snippet "\\dv\[2\]{([\s\\\w]*)" "二阶微分" ri
\dv[2]{`!p snip.rv=match.group(1)`}{
endsnippet

context "isMath()"
snippet p "偏微分"
\pdv{$1}
endsnippet
context "isMath()"
snippet "\\pdv{([\s\\\w]*)" "偏微分" ri
\pdv{`!p snip.rv=match.group(1)`}{
endsnippet

context "isMath()"
snippet pp "二阶偏微分"
\pdv[2]{$1}
endsnippet
context "isMath()"
snippet "\\pdv\[2\]{([\s\\\w]*)" "二阶偏微分" ri
\pdv[2]{`!p snip.rv=match.group(1)`}{
endsnippet

context "isMath()"
snippet sqr "平方根" i
\sqrt{$1}
endsnippet 


context "isMath()"
snippet | "|" i
\left| $1 \right|
endsnippet 

context "isMath()"
snippet [ "|" i
\left[ $1 \right
endsnippet 

context "isMath()"
snippet ( "|" i
\left( $1 \right
endsnippet 

# 导数(流数)
context "isMath()"
snippet "(\\?\w+)(\.\.)" "二阶导" ri
\ddot{`!p snip.rv=match.group(1)`}
endsnippet 

context "isMath()"
snippet lims "lim substack" 
\lim_{\substack{$1}}
endsnippet 


context "isMath()"
snippet '([\de\.]+)MeV' "MeV" r
\SI{`!p snip.rv=match.group(1)`}{\MeV}
endsnippet 

context "isMath()"
snippet '([\de\.]+)si' "unit" r
\SI{`!p snip.rv=match.group(1)`}{$1}$0
endsnippet

context "isMath()"
snippet "(\\?[A-Za-z]+)(\.)" "一阶导" ri
\dot{`!p snip.rv=match.group(1)`}
endsnippet 

context "isMath()"
snippet '(\w)hat' " i hat " r
\hat{`!p snip.rv=match.group(1)`}$0
endsnippet

#向量 vector 匹配\零次或一次，或一个非贪婪限定, \w匹配字母、数字、下划线。等价于'[A-Za-z0-9_]'
priority 10
context "isMath()"
snippet "([A-Za-z]+)(,\.|\.,)" "Vector postfix" rA
\vb{`!p snip.rv=match.group(1)`}
endsnippet 

priority 100
context "isMath()"
snippet "(\\[A-Za-z]+)(,\.|\.,)" "Vector postfix" rA
\va{`!p snip.rv=match.group(1)`}
endsnippet 

# in latex.ltx, \ldots is equated (\let) to \dots. so in text, it's the same, and you can use either.
# with amsmath, the situation is more complicated; \dots tries to determine by context (only in math mode) whether to use \ldots or \cdots, with several more options for the author if amsmath doesn't get it right.
# so in general, it's easier to just use \dots and not have to remember the details. but if the alternative chosen by amsmath isn't appropriate, the original commands can still be used explicitly.
priority 100
context "isMath()"
snippet ... "\dots: \ldots or \cdots" iA
\dots
endsnippet

context "isMath()"
snippet => "implies" Ai
\implies
endsnippet

context "isMath()"
snippet =< "implied by" Ai
\impliedby
endsnippet

context "isMath()"
snippet iff "iff" i
\iff
endsnippet

context "isMath()"
snippet +- "pm" iA
\pm 
endsnippet

context "isMath()"
snippet ~= "approximate " iA
\approx 
endsnippet


snippet ali "aligned 必须在数学环境中" b
\begin{aligned}
	${1:${VISUAL}}
\end{aligned}
endsnippet


#snippet array "Align" i
#\left\{\begin{array}
#{l}{x=r(\theta) \cos \theta} \\ 
#{y=r(\theta)\sin \theta}
#\end{array}\right. \theta \in[\alpha, \beta]
#endsnippet


context "isMath()"
snippet // "Fraction" i
\\frac{${1:${VISUAL}}}{$2}$0
endsnippet

snippet '(\S+)' "Fraction" Ar
\\frac{`!p snip.rv=match.group(1)`}{$1}
endsnippet


# 分式 frac
context "isMath()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet




# 分数
context "isMath()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]   # 匹配除了最后一个所有，因为最后一个是)
depth = 0
i = len(stripped) - 1  # 再去掉 (
while True:
	if stripped[i] == ')': depth += 1  # 此时 depth 不为 0
	if stripped[i] == '(': depth -= 1  # 若匹配到 (, depth = 0
	if depth == 0: break;
	i-=1   # 到此为止获取所有 () 内的字符串
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

# 角标
context "isMath()"
snippet '\b([A-Za-z])(\d)' "auto subscript 角标" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "isMath()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2 角标" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "isMath()"
snippet != "not equals" iA
\neq 
endsnippet

context "isMath()"
snippet <= "not equals" iA
\leq 
endsnippet

snippet >= "not equals" iA
\geq 
endsnippet

snippet >> "greater" A
\gg 
endsnippet
 
snippet << "less" A
\ll 
endsnippet
 


snippet >~ "not equals" iA
\gtrsim  
endsnippet

snippet <~ "not equals" iA
\lesssim  
endsnippet


# # 用imap `= 
# context "isMath()"
# snippet == "equals" iA
# \equiv 
# endsnippet

context "isMath()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "isMath()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

context "isMath()"
snippet .* "点乘" A
\vdot 
endsnippet

context "isMath()"
snippet x* "叉乘" A
\cross 
endsnippet

context "isMath()"
snippet ^^ "subscript" Ai
^{$1} $0
endsnippet

context "isMath()"
snippet __ "sub" Ai
_{$1} $0
endsnippet



############
#  矩阵和行列式  #{{{

# 狄拉克符号

# context "isMath()"
# snippet "\<(.*?)\|" "bra" riA
# \bra{`!p snip.rv = match.group(1).replace('q', f'\psi').replace('f', f'\phi')`}
# endsnippet

context "isMath()"
snippet "\<(.*?)\|" "bra" riA
\bra{`!p snip.rv = match.group(1)`}
endsnippet

context "isMath()"
snippet "\|(.*?)\>" "ket" riA
\ket{`!p snip.rv = match.group(1)`}
endsnippet

context "isMath()"
snippet "(.*)\\bra{(.*?)}([^\|]*?)\>" "braket" riA
`!p snip.rv = match.group(1)`\braket{`!p snip.rv = match.group(2)`}{`!p snip.rv = match.group(3)`}
endsnippet

# vim:ft=snippets
