
#\item \textbf{定理类}：theorem，lemma，proposition，corollary；
#\item \textbf{定义类}：definition，conjecture，example；
#\item \textbf{备注类}：remark，note，case；
#\item \textbf{证明类}：proof。
global !p
def isComment(): 
    return vim.eval('vimtex#syntax#in_comment()') == '1'

def isEnv(name):
    [x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
    return x != '0' and x != '0'
endglobal

priority -30
snippet sec "Section"
\section{$1}
endsnippet

snippet op "options" b
\options
{$1}
{$2}
{$3}
{$4}
endsnippet

snippet sub "Section"
\subsection{$1}
$0
endsnippet

snippet b "begin" b
\begin{$1}
	$2
\end{$1}
endsnippet

priority -200
snippet '([A-Za-z]+\*?)' "begin" rb
\begin{`!p snip.rv=match.group(1)`}
	$1
\end{`!p snip.rv=match.group(1)`}
endsnippet

snippet ! "%! TEX root = ./debug.tex" b
%!TEX program=xelatex
% !TEX root = main.tex
endsnippet

# eg: % vim: spelllang=en_us:
snippet % "vim option" b
%%% vim: spelllang=en_us: $1
endsnippet

snippet fontset "使用方正字体" b

\setCJKmainfont[BoldFont={FZJinLS-B-GB}, ItalicFont={FZBeiWeiKaiShu-S19S}]{FZNewShuSong-Z10S}
\setCJKsansfont[BoldFont={FZJinLS-B-GB}, ItalicFont={FZBeiWeiKaiShu-S19S}]{Hiragino Sans GB}
\setCJKmonofont{Sarasa Mono SC}
\setCJKfamilyfont{zhsong}{FZNewShuSong-Z10S}
\setCJKfamilyfont{zhhei}{Hiragino Sans GB}
\setCJKfamilyfont{zhkai}{FZBeiWeiKaiShu-S19S}
\setCJKfamilyfont{zhfs}{FZYanSongS-M-GB}

\newcommand*{\songti}{\CJKfamily{zhsong}}
\newcommand*{\heiti}{\CJKfamily{zhhei}}
\newcommand*{\kaishu}{\CJKfamily{zhkai}}
\newcommand*{\fangsong}{\CJKfamily{zhfs}}

endsnippet

snippet newenv "new environment" b
\newenvironment{${1:new environment name}}[1]{%
	${2:begin} #1}{%
${3:end}}
endsnippet

snippet ql "quad" 
 \quad $0
endsnippet

snippet qql "qquad"
 \qquad $0
endsnippet

snippet ul "underline" i
\uline{$1}$0
endsnippet

# snippet if "include eps" b
# \includegraphics[width=0.5\textwidth]{figures/$1}
# $0
# endsnippet


# snippet exc "include eps" b
# \includegraphics[width=0.5\textwidth]{figures/`!p
# import pyperclip
# imgpath = pyperclip.paste()
# while (imgpath[-1] in ['\r', '\n']):
# 	imgpath = imgpath[:-1]  # 移除尾部换行符
# snip.rv=imgpath
# `
# }
# $0
# endsnippet

# snippet is "include png" b
# \includegraphics[width=0.5\textwidth]{`!p
# filename='test.png'
# director='figures/'
# fullpath=director+filename
# cmd='flameshot gui --raw > ' + fullpath
# # check_call(['flameshot', 'gui', '--raw', '> ' , fullpath], stdout=DEVNULL, stderr=STDOUT)
# import subprocess
# # if not snip.c:
# 	# os.system(cmd)
# subprocess.call(cmd)
# snip.rv=fullpath
# `}
# $0
# endsnippet

# snippet blub "include png" b
# `!p
# if not snip.c:
#     os.system("date >> /tmp/blub.txt")
#     snip.rv="foo"
# `$0
# endsnippet

# snippet i "include img" b
# \includegraphics[width=0.5\textwidth]{`!p
# import time
# # round 是四舍五入
# filename=str(round(time.time() * 1000))+'.png'
# director='figures/'
# fullpath=director+filename
# # cmd = 'tex-screenshot'
# # cmd='maim -s ' + fullpath + ' > /dev/null 2&>1'
# # import os
# # os.system(cmd)
# import subprocess
# # subprocess.call(['maim', '-s', fullpath])
# # rnt=subprocess.call(['flameshot', 'gui', '--raw', '>', fullpath], shell=True)
# # import os
# cmd='flameshot gui --raw > figures/test.png'
# os.system(cmd)
# # subprocess.check_output(['flameshot', 'gui', '--raw','>', fullpath], shell=True)
# # if rnt==0 :
# snip.rv=fullpath
# # else:
# 	# snip.rv='hello'
# `}
# $0
# endsnippet


# mk 表示 make Ketax
snippet mk "Math" wA
\(${1}\)$0
endsnippet

# # mk 表示 make Ketax
# snippet mk "Math" wA
# $${1}$`!p
# if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
# 	snip.rv = ' '
# else:
# 	snip.rv = ''
# `$2
# endsnippet

# dm 表示 Display math
priority 100
snippet dm "Math" wA
\begin{equation*}
	$1
\end{equation*}
endsnippet

snippet eq "Math" b
\begin{equation}
	$1
\end{equation}
endsnippet

snippet ref "ref" w
\ref{${1:reference}} $0
endsnippet

snippet fref "ref" w
图~\ref{fig:${1:reference}} $0
endsnippet

snippet 图 "ref" i
图~\ref{fig:$1} $0
endsnippet

snippet }所示 "ref" iA
}~所示
endsnippet


# snippet visual "Math"
# \[
# 	${1:${VISUAL}}
# \]
# test.
# `!p
# import subprocess
# import base64
# snip.rv = (subprocess.check_output(['translator.py', '--engine=baidu', snip.v.text])).decode()`
# $0
# endsnippet

snippet eqr "eqref" i
Eq.~\eqref{eq:$1} $0
endsnippet

snippet 式 "方程引用" i
式~\eqref{eq:$1} $0
endsnippet

snippet 方程 "方程引用" i
方程~\eqref{eq:$1} $0
endsnippet


snippet bib "bibliography" b
\bibliography{myLibrary}
endsnippet

snippet subfig "subfig" b
\begin{figure} 
\centering
\begin{subfigure}{.48\linewidth}
  \includegraphics[width=\linewidth]{figures/2022-05-20T212232+0800.png}
  \caption{电子在三维空间的运动轨迹}
  \label{fig:电子在三维空间的运动轨迹}
\end{subfigure}
\begin{subfigure}{.48\linewidth}
  \includegraphics[width=\linewidth]{figures/2022-05-20T212014+0800.png}
  \caption{xoy面上投影}
  \label{fig:xoy面上投影}
\end{subfigure}
  \caption{高能逃逸电子在托卡马克中的运动轨迹}%
  \label{fig:高能逃逸电子在托卡马克中的运动轨迹}%
\end{figure}
endsnippet

snippet \includegraphics "graphics width" b
\includegraphics[width=$1\linewidth]
endsnippet

snippet ig "includegraphics" b
\includegraphics[width=0.9\textwidth]{figures/$1}
endsnippet

snippet wf "wrapfigure" b
\begin{wrapfigure}{r}{0.30\textwidth}
	\includegraphics[width=1\linewidth]{figures/$1}
\end{wrapfigure}
endsnippet


snippet svg "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	\includesvg[width=0.8\linewidth]{figures/$2}
	\caption{`!p
sentence=t[2].replace('_', ' ')
dot_num=sentence.find('.')
if dot_num != -1:
	result=sentence[0:dot_num]
else:
	result=sentence
snip.rv = result.title()`.$3}%
	\label{fig:${2/(\w+)\.\w+/$1/}}
\end{figure}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	\includegraphics[width=0.8\linewidth]{figures/$2}
	\caption{`!p
sentence=t[2].replace('_', ' ')
dot_num=sentence.find('.')
if dot_num != -1:
	result=sentence[0:dot_num]
else:
	result=sentence
snip.rv = result.title()`.$3}%
	\label{fig:${2/(\w+)\.\w+/$1/}}
\end{figure}
endsnippet

# t：top，表示排在页面顶部；
# h：here，表示当前位置；将图形放置在 正文文本中给出该图形环境的地方。如果本页所剩的页面不够， 这一参数将不起作用；
# b：bottom，将图形放置在页面的底部。
# p：page，浮动页，将图形放置在只允许有浮动对象的页面上。
# H：表示固定图片位置，需要加入\usepackage{float} ；

#snippet * "Individual item" bA
#\item$0
#endsnippet

snippet cb "colorbox"
\colorbox{${1:yellow}}{${2:text}}
$0
endsnippet

snippet ct "colortext"
{\color{${1:red}}${2:text}} $0
endsnippet

# 注解
snippet remark "remark" bA
\begin{remark}
	$0
\end{remark}
endsnippet

# 注解
snippet '[Rr][Kk]' "remark" br
\begin{remark}
	$0
\end{remark}
endsnippet

snippet note "note" b
\begin{note}
	$0
\end{note}
endsnippet

snippet eg "example" b
\begin{example}
	$0
\end{example}
endsnippet

# 定理
snippet '[Tt]hm?' "theorem 定理" br
\begin{theorem}[$1]
	$2
\end{theorem}
$0
endsnippet

snippet prop "proposition 命题" b
\begin{proposition}[$1]
	$2
\end{proposition}
$0
endsnippet

snippet Prop "proposition 命题" b
\begin{proposition}[$1]
	$2
\end{proposition}
$0
endsnippet

# snippet Th "theorem" b
# \begin{theorem}[$1]
# 	$2
# \end{theorem}
# $0
# endsnippet

snippet lm "lemma" b
\begin{lemma}[$1]
	$2
\end{lemma}
$0
endsnippet

snippet cor "corollary" b
\begin{corollary}[$1]
	$2
\end{corollary}
$0
endsnippet

snippet def "definition" b
\begin{definition}[$1]
	$2
\end{definition}
$0
endsnippet

snippet pf "proof" b
\begin{proof}
	$0
\end{proof}
endsnippet

snippet Pf "proof" bA
\begin{proof}
	$0
\end{proof}
endsnippet

snippet proof "proof" b
\begin{proof}
	$0
\end{proof}
endsnippet

snippet href "href" w
\href{${2:url}}{${1:${VISUAL:text}}} $0
endsnippet

snippet verb "行间代码"
\verb+$1+
endsnippet

priority -10
snippet lst "lstlisting" b
\begin{lstlisting}[language=${1:cpp}]
${2:${VISUAL:code}}
\end{lstlisting}

$0
endsnippet

snippet columns "columns" b
\begin{columns}
	\begin{column}{.45\textwidth}
	${1:${VISUAL:text}}
	\end{column}
	\begin{column}{.45\textwidth}
	${2:${VISUAL:text}}
	\end{column}
\end{columns}
endsnippet

snippet pac "usepackage" b
\usepackage{$1}
endsnippet
snippet template "Basic template" b
\documentclass[geye,fontset=windows,color=green,device=normal,lang=cn]{elegantnote}
\graphicspath{{fig/}}
\usepackage{ulem} 
\usepackage{physics} 
% \newcommand*{\Ham}{\hat{\mathcal{H}}} % \H 有定义了(居然是个"，是个 single letter command ，我要这有何用)，所以用 renewcommand
\DeclareMathOperator{\Ham}{\hat{\mathcal{H}}}
%\usepackage{ulem}

\title{Energy}
\author{Xu}
\date{\today}

\begin{document}
%\maketitle
%\tableofcontents
	$0
\end{document}
endsnippet

snippet elegantnote "elegantnote" b
\documentclass[fontset=windows,color=green,device=normal,lang=cn]{elegantnote}
endsnippet


##代码
#snippet "mint(ed)?( (\S+))?" "Minted code typeset" br
#\begin{listing}
#\begin{minted}[linenos,numbersep=5pt,frame=lines,framesep=2mm]{${1:`!p
#snip.rv = match.group(3) if match.group(2) is not None else "language"`}}
#${2:${VISUAL:code}}
#\end{minted}
#\caption{${3:caption name}}
#\label{lst:${4:${3/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}
#\end{listing}
#
#$0
#endsnippet

snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

priority 1000
snippet math "mathematicablock" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet




# snippet table "Table environment" b
# \begin{table}[${1:htpb}]
# 	\centering
# 	\caption{${2:caption}}
# 	\label{tab:${3:label}}
#   \rowcolors{1}{White}{Lavender}
# 	\begin{${4:t}${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${5:c}}
# 	$0${5/(?<=.)(c|l|r)|./(?1: & )/g}
# 	\end{$4${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
# \end{table}
# endsnippet

# pre_expand "create_table(snip)"
# snippet "tab(\d+)x(\d+)" "Generate table of *width* by *height*" r  
# endsnippet

# pre_expand "add_row(snip)"
# snippet "r(\d+)" "Add table row of dimension ..." rAb
# endsnippet

# ./texmath.snippets
extends texmath
