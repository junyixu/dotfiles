snippet ! "python3" b
#! /usr/bin/env python3
$0
endsnippet

snippet sp "sympy" b
import sympy as sp
$0
endsnippet

snippet pd "pandas" b
import pandas as pd
$0
endsnippet

snippet np "numpy" b
import numpy as np
from numpy import array, sqrt
$0
endsnippet

snippet plt "matplotlib.pyplot" b
from matplotlib import pyplot as plt
$0
endsnippet

snippet pr "print" b
print($0)
endsnippet

# https://github.com/untitled-ai/jupyter_ascending.vim/issues/8
snippet #m "markdown cell for jupyter" b
# %% [markdown]

endsnippet

# snippet plt "matplotlib.pyplot" b
# import matplotlib.pyplot as plt
# $0
# endsnippet

snippet fft "Fast Fourier Transformation" b
from scipy.fftpack import fft
$0
endsnippet
snippet latex "display latex" b
%display latex
endsnippet


# 还可以加 dtype
# c=np.loadtxt('b.csv',dtype=np.int,delimiter=',')
snippet loadcsv "numpy load csv"
np.loadtxt('${1:FileName}.csv', delimiter=',')$0
endsnippet

snippet savecsv "numpy save csv 保留小数点后一位"
np.loadtxt('${1:FileName}.csv', fmt='%.1f', delimiter=',')$0 # 浮点型 0.0
endsnippet

snippet savefig "savefig" b
plt.savefig('../figures/problem1.pdf', bbox_inches='tight')
endsnippet

snippet fig "figure" b
fig = plt.figure(1)
ax = fig.add_subplot()
ax.plot($1)
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_title("my plot")
fig.show()
endsnippet

snippet fig3d "figure 3D" b
fig = plt.figure(1)
ax = fig.add_subplot(projection="3d")
ax.plot($1)
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('z')
ax.set_title("my plot")
fig.show()
endsnippet

snippet surface "figure 3D surface" b
fig = plt.figure(1)
ax = fig.add_subplot(projection="3d")
surf=ax.plot_surface(X, Y, Z, cmap=cm.coolwarm,linewidth=0, antialiased=False)
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
ax.set_title("my plot")
fig.colorbar(surf, shrink=0.5, aspect=5)
fig.show()
endsnippet

snippet 3ds "figure 3D" b
fig, axs = plt.subplots(2,2,subplot_kw={"projection": "3d"})
endsnippet

snippet 3d "Description" b
ax = plt.axes(projection='3d')
zline = np.linspace(0, 15, 1000)
xline = np.sin(zline)
yline = np.cos(zline)
ax.plot3D(xline, yline, zline, 'gray')
endsnippet

snippet main "run" b
if __name__ == '__main__':
    main()
endsnippet

snippet HDF5 "HDF5 " b
import h5py
f = h5py.File('./Data.h5', 'r')
X=f["PTC"]
X=np.array(X)
endsnippet

# extends texmath
