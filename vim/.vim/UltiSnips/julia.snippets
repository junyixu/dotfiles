snippet for "for" b
for $1 ∈ $2
	$3
end
endsnippet
snippet struct "struct" b
struct $1
end
endsnippet
snippet "mutable struct" "mutable struct" b
mutable struct $1
end
endsnippet
snippet fun "function" b
function $1
end
endsnippet

snippet o "composition operator"
∘ 
endsnippet

snippet x "cross product"
× 
endsnippet

snippet . "dot product  a ⋅ b = ai bi"
⋅ 
endsnippet

snippet : "Double contraction  B : C = Bij Cij"
⊡ 
endsnippet

snippet ox "Tensor product (open product)  b ⊗  c = Aij = bi cj"
⊗ 
endsnippet

snippet savefig "savefig" b
plt.savefig("./figures/$(bytes2hex(rand(UInt8, 4))).pdf", bbox_inches="tight")
endsnippet

# subplots subplot_kw 用于 3d
# 则所有的子图都会用3d
# 想要混合使用 用 ax=fig.add_subplot(projectin="3d")
snippet subplots3d "3d subplots" b
fig, ax = plt.subplots(1,3, figsize(14,4), subplot_kw=Dict(:projection=>"3d"))
endsnippet

snippet subplots "3d subplots" b
fig, ax = plt.subplots()
endsnippet

snippet add_axes "figure in figure" b
xx=-1:0.01:1
fig, ax = plt.subplots()
fig.tight_layout()
inset_ax = fig.add_axes([0.2, 0.55, 0.35, 0.35]) # X, Y, width, height
inset_ax.plot(xx, xx.^2, xx, xx.^3)
inset_ax.set_title("zoom near origin")
# set axis range
inset_ax.set_xlim(-.2, .2)
inset_ax.set_ylim(-.005, .01)
# set axis tick locations
inset_ax.set_yticks([0, 0.005, 0.01])
inset_ax.set_xticks([-0.1,0,.1]);
plt.show()
endsnippet

snippet ~= "composition operator" A
≈
endsnippet
snippet b "begin"
$1
	$0
end
endsnippet

snippet in "in" i
∈
endsnippet

snippet perp "in" i
⟂
endsnippet

snippet / "frac" i
÷
endsnippet

snippet main "main" b
function main()
	$0
end

if abspath(PROGRAM_FILE) == @__FILE__
    main()
end
endsnippet
snippet anim "animate" b
using PyCall
anim=pyimport("anim")["animate2D"]
endsnippet

snippet phyconst "PhysicalConstants" b
import PhysicalConstants.CODATA2018 as C
constants=(:c_0, :ε_0, :e)
for constant in constants
	eval(:($constant=C.$constant.val))
end
endsnippet

snippet HDF5 "HDF5" b
using HDF5
fid=h5open("./Data.h5", "r")
X=read(fid["X"])
attributes(fid["X"])["X_description"]
read_attribute(fid["X"],"X_description")
delete_object(fid, "X")
close(fid)
endsnippet

snippet mesh "mgrid or meshgrid" b
x = range(1, 2, length=10)
y = range(-1, 1, length=30)
X=repeat(x, 1, length(y))
Y=repeat(y', length(x))
Z = @. sin(π*X) * sin(π*Y)

ax=plt.axes(projection="3d")
ax.plot_surface(X, Y, Z, cmap="autumn_r", lw=0.5, rstride=1, cstride=1)
ax.set_xlabel("X")
ax.set_ylabel("Y")
ax.set_zlabel("Z")
plt.show()
endsnippet

snippet 3d "3d plot" b
ax=plt.axes(projection="3d")
ax.plot3D(x, y, z)
ax.set_xlabel("X")
ax.set_ylabel("Y")
ax.set_zlabel("Z")
plt.show()
endsnippet

snippet bar3d "bar3d" b
ax=plt.axes(projection="3d")
# ax.bar3d(x, y, bottom, width, depth, top, shade=true) 
ax.bar3d(repeat(${1:x}, inner=6), repeat(${2:y}, outer=6), [zeros(size($3))...], 1, 1, [${3:z}...], shade=true)
ax.set_xlabel("X")
ax.set_ylabel("Y")
ax.set_zlabel("Z")
plt.show()
endsnippet

snippet HDF5ReadAll "HDF5 Read All " b
using HDF5
fid=h5open("./Data.h5", "r")
for key in keys(fid)
	sb=Symbol(key)
	eval(:($sb = read(fid[$key])))
end
close(fid)
endsnippet


snippet plt "matplotlib.pyplot" b
using PyCall
using LaTeXStrings

@pyimport matplotlib.pyplot as plt
endsnippet

snippet ODE1 "ODEProblem" b
using DifferentialEquations

f(u, p, t) = 1.01 * u
u0 = 1 / 2
tspan = (0.0, 1.0)
prob = ODEProblem(f, u0, tspan)
sol = solve(prob, Tsit5(), reltol = 1e-8, abstol = 1e-8)

plt.scatter(sol.t, sol.u)
plt.show()
endsnippet

snippet ODE "ODEProblem" b
using DifferentialEquations

function ff!(dθ, θ, p, t)
	γ,μ = p
	# θ[1]: θ; θ[2] = ω
	dθ[1] = θ[2]
	dθ[2] = γ * cos(θ[1]) - μ * θ[2]^2
end
θ0 = [0.0, 0.0]
γ = 10
μ = 0.1
tspan = (0.0, 1.4/sqrt(5))
prob = ODEProblem(ff!, θ0, tspan, [γ, μ])
sol = solve(prob, alg_hints = [:stiff], reltol = 1e-8, abstol = 1e-8)

plt.scatter(sol.t, sol.u[1])
plt.show()
endsnippet

snippet font "matplotlib font" b
rcParams = PyDict(plt.matplotlib."rcParams")
rcParams["font.size"] = 12
endsnippet
